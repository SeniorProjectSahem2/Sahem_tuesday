{"filter":false,"title":"notifications_controller.rb","tooltip":"/app/controllers/notifications_controller.rb","undoManager":{"mark":5,"position":5,"stack":[[{"start":{"row":7,"column":5},"end":{"row":8,"column":0},"action":"insert","lines":["",""],"id":2},{"start":{"row":8,"column":0},"end":{"row":8,"column":2},"action":"insert","lines":["  "]}],[{"start":{"row":8,"column":2},"end":{"row":9,"column":0},"action":"insert","lines":["",""],"id":3},{"start":{"row":9,"column":0},"end":{"row":9,"column":2},"action":"insert","lines":["  "]}],[{"start":{"row":9,"column":2},"end":{"row":13,"column":5},"action":"insert","lines":["  def mark_as_read","    @notifications = Notification.where(recipient: current_user).unread","    @notifications.update_all(read_at: Time.zone.now)","    render json: {success: true}","  end"],"id":4}],[{"start":{"row":0,"column":0},"end":{"row":80,"column":0},"action":"remove","lines":["class NotificationsController < ApplicationController","  before_action :set_notification, only: [:show, :edit, :update, :destroy]","","  # GET /notifications","  # GET /notifications.json","  def index","    @notifications = Notification.all","  end","  ","    def mark_as_read","    @notifications = Notification.where(recipient: current_user).unread","    @notifications.update_all(read_at: Time.zone.now)","    render json: {success: true}","  end","","  # GET /notifications/1","  # GET /notifications/1.json","  def show","  end","","  # GET /notifications/new","  def new","    @notification = Notification.new","  end","","  # GET /notifications/1/edit","  def edit","  end","","  # POST /notifications","  # POST /notifications.json","  def create","    @notification = Notification.new(notification_params)","","    respond_to do |format|","      if @notification.save","        format.html { redirect_to @notification, notice: 'Notification was successfully created.' }","        format.json { render :show, status: :created, location: @notification }","      else","        format.html { render :new }","        format.json { render json: @notification.errors, status: :unprocessable_entity }","      end","    end","  end","","  # PATCH/PUT /notifications/1","  # PATCH/PUT /notifications/1.json","  def update","    respond_to do |format|","      if @notification.update(notification_params)","        format.html { redirect_to @notification, notice: 'Notification was successfully updated.' }","        format.json { render :show, status: :ok, location: @notification }","      else","        format.html { render :edit }","        format.json { render json: @notification.errors, status: :unprocessable_entity }","      end","    end","  end","","  # DELETE /notifications/1","  # DELETE /notifications/1.json","  def destroy","    @notification.destroy","    respond_to do |format|","      format.html { redirect_to notifications_url, notice: 'Notification was successfully destroyed.' }","      format.json { head :no_content }","    end","  end","","  private","    # Use callbacks to share common setup or constraints between actions.","    def set_notification","      @notification = Notification.find(params[:id])","    end","","    # Never trust parameters from the scary internet, only allow the white list through.","    def notification_params","      params.require(:notification).permit(:recipient_id, :actor_id, :read_at, :action, :notifiable_id, :notifiable_type)","    end","end",""],"id":5},{"start":{"row":0,"column":0},"end":{"row":79,"column":0},"action":"insert","lines":["class NotificationsController < ApplicationController","  before_action :set_notification, only: [:show, :edit, :update, :destroy]","  before_action :authenticate_user!","","  def index","    @notifications = Notification.where(recipient: current_user).recent","  end","","  def mark_as_read","    @notifications = Notification.where(recipient: current_user).unread","    @notifications.update_all(read_at: Time.zone.now)","    render json: {success: true}","  end","","  # GET /notifications/1","  # GET /notifications/1.json","  def show","  end","","  # GET /notifications/new","  def new","    @notification = Notification.new","  end","","  # GET /notifications/1/edit","  def edit","  end","","  # POST /notifications","  # POST /notifications.json","  def create","    @notification = Notification.new(notification_params)","","    respond_to do |format|","      if @notification.save","        format.html { redirect_to @notification, notice: 'Notification was successfully created.' }","        format.json { render :show, status: :created, location: @notification }","      else","        format.html { render :new }","        format.json { render json: @notification.errors, status: :unprocessable_entity }","      end","    end","  end","","  # PATCH/PUT /notifications/1","  # PATCH/PUT /notifications/1.json","  def update","    respond_to do |format|","      if @notification.update(notification_params)","        format.html { redirect_to @notification, notice: 'Notification was successfully updated.' }","        format.json { render :show, status: :ok, location: @notification }","      else","        format.html { render :edit }","        format.json { render json: @notification.errors, status: :unprocessable_entity }","      end","    end","  end","","  # DELETE /notifications/1","  # DELETE /notifications/1.json","  def destroy","    @notification.destroy","    respond_to do |format|","      format.html { redirect_to notifications_url, notice: 'Notification was successfully destroyed.' }","      format.json { head :no_content }","    end","  end","","  private","    # Use callbacks to share common setup or constraints between actions.","    def set_notification","      @notification = Notification.find(params[:id])","    end","","    # Never trust parameters from the scary internet, only allow the white list through.","    def notification_params","      params.require(:notification).permit(:recipient_id, :actor_id, :read_at, :action, :notifiable_id, :notifiable_type)","    end","end",""]}],[{"start":{"row":2,"column":35},"end":{"row":3,"column":0},"action":"insert","lines":["",""],"id":6},{"start":{"row":3,"column":0},"end":{"row":3,"column":2},"action":"insert","lines":["  "]}],[{"start":{"row":3,"column":2},"end":{"row":3,"column":47},"action":"insert","lines":["skip_before_action :verify_authenticity_token"],"id":7}]]},"ace":{"folds":[],"scrolltop":0,"scrollleft":0,"selection":{"start":{"row":3,"column":47},"end":{"row":3,"column":47},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":0},"timestamp":1510557765573,"hash":"200831425dd00dac632e3a1aeab8f7ad45f08b98"}